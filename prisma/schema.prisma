generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider             = "mysql"
  url                  = env("PLANETSCALE_PRISMA_DATABASE_URL")
  referentialIntegrity = "prisma"
}

model Account {
  id                 Int     @id @default(autoincrement())
  userId             Int
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?
  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           Int      @id @default(autoincrement())
  sessionToken String   @unique
  expires      DateTime
  userId       Int
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id            Int       @id @default(autoincrement())
  name          String
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?   @db.VarChar(256)
  bio           String?   @db.LongText
  dateOfBirth   String?
  gender        Gender?
  ocupation     String?
  for           String?
  language      Language  @default(english)
  country       String?
  role          Role      @default(USER)
  lastLogin     DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
}

model Feedback {
  id      Int    @id @default(autoincrement())
  rating  Int
  email   String
  comment String @db.Text
  slug    String
}

model views {
  slug  String @id @db.VarChar(128)
  count Int    @default(1)
}

enum Gender {
  male
  female
  other
}

enum Language {
  english
  hindi
}

enum Role {
  USER
  ADMIN
}
