datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                        String             @id @default(auto()) @map("_id") @db.ObjectId
  accounts                  Account[]
  company                   String             @default("JW")
  department                String
  designation               String
  email                     String             @unique
  emailVerified             DateTime?
  employeeId                String
  image                     String?
  mobile                    String
  name                      String
  password                  String
  role                      Role               @default(value: USER)
  sessions                  Session[]
  site                      Site?              @relation(fields: [siteId], references: [id])
  siteId                    String?            @db.ObjectId
  createdAt                 DateTime           @default(now())
  updatedAt                 DateTime           @updatedAt
  Supplier_approved         ApprovedSupplier[] @relation("Supplier_approved")
  Supplier_entries          ApprovedSupplier[] @relation("Supplier_entries")
  Receiving_reports_verify  ReceivingReport[]  @relation("Receiving_reports_verify")
  Receiving_reports_entries ReceivingReport[]  @relation("Receiving_reports_entries")
}

model Site {
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  name String
  User User[]
}

enum Role {
  USER
  ADMIN
  MANAGER
  OWNER
}

model ApprovedSupplier {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  address           String
  approvedBy        User?    @relation("Supplier_approved", fields: [approvedById], references: [id])
  approvedById      String?  @db.ObjectId
  category          String
  entryBy           User     @relation("Supplier_entries", fields: [entryById], references: [id])
  entryById         String   @db.ObjectId
  fssaiLicenseNo    String
  gstNo             String
  licenseValidUpto  String
  location          String
  productName       String
  sku               String
  supplierName      String
  supplyingLocation String
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt



  @@unique([supplierName, gstNo, fssaiLicenseNo])
}

model ReceivingReport {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  batchNo       String   @unique
  code          String
  productName   String
  quantity      String
  receivingTemp String
  remark        String?
  sanitization  String
  supplierName  String
  useByDate     String
  entryBy       User     @relation("Receiving_reports_entries", fields: [entryById], references: [id])
  entryById     String   @db.ObjectId
  verifiedById  String?  @db.ObjectId
  verifiedBy    User?    @relation("Receiving_reports_verify", fields: [verifiedById], references: [id])
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}
